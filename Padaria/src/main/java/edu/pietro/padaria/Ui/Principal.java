/*
 * Este é o arquivo principal da interface gráfica da sua padaria.
 * Ele representa a janela principal do sistema de vendas.
 */

package edu.pietro.padaria.Ui;

import edu.pietro.padaria.model.Produto;
import edu.pietro.padaria.model.ProdutoVenda;
import edu.pietro.padaria.service.ProdutoService;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 * Classe principal da janela da padaria.
 * Extende JFrame → é uma janela do Swing.
 */
public class Principal extends javax.swing.JFrame {
    
    // Logger para registrar erros (não usado ativamente no seu código, mas bom ter)
    private static final java.util.logging.Logger logger = 
        java.util.logging.Logger.getLogger(Principal.class.getName());
    
    // Lista de produtos carregados do serviço (pode vir de banco, arquivo, etc.)
    List<Produto> produtos;
    
    // Modelo da lista do carrinho (armazena os itens que o cliente vai comprar)
    DefaultListModel<ProdutoVenda> listaCarrinho;
    
    /**
     * Construtor: é chamado quando a janela é criada.
     */
    public Principal() {
        // Inicializa os componentes visuais (botões, caixas, etc.) gerados pelo NetBeans
        initComponents();
        
        // Carrega produtos do serviço (provavelmente uma lista padrão)
        produtos = ProdutoService.inicializarProdutos();

        // --- CRIAÇÃO MANUAL DOS PRODUTOS DA PADARIA ---
        // Cada produto tem ID, nome, preço e estoque (saldo)
        Produto p1 = new Produto(1, "Pão");
        p1.setPreco(0.5);
        p1.setSaldoEstoque(100); // Temos 100 pães no estoque

        Produto p2 = new Produto(2, "Pão de Queijo");
        p2.setPreco(5);
        p2.setSaldoEstoque(50);

        Produto p3 = new Produto(3, "Queijo");
        p3.setPreco(15);
        p3.setSaldoEstoque(20);

        Produto p4 = new Produto(4, "Presunto");
        p4.setPreco(2.5);
        p4.setSaldoEstoque(30);

        Produto p5 = new Produto(5, "Mussarela");
        p5.setPreco(2.0);
        p5.setSaldoEstoque(40);

        // Adiciona os produtos criados manualmente ao combo box (lista suspensa)
        jComboBox1.addItem(p1);
        jComboBox1.addItem(p2);
        jComboBox1.addItem(p3);
        jComboBox1.addItem(p4);
        jComboBox1.addItem(p5);

        // Também adiciona os produtos vindos do serviço (caso queira misturar)
        for (Produto item : produtos) {
            jComboBox1.addItem(item);
        }

        // Inicializa o modelo do carrinho e associa à lista visual (jList1)
        listaCarrinho = new DefaultListModel<>();
        jList1.setModel(listaCarrinho);
    }
    
    // Método vazio (não usado atualmente)
    public void paraCada(Produto p){
        // Pode ser usado depois para percorrer produtos, mas hoje não faz nada
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bAdiciona = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox<>();
        jSpinner1 = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        bRemove = new javax.swing.JButton();
        tTotal = new javax.swing.JTextField();
        Saldo = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bAdiciona.setText("Adiciona");
        bAdiciona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAdicionaActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        jScrollPane2.setViewportView(jList1);

        bRemove.setText("Remove");
        bRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRemoveActionPerformed(evt);
            }
        });

        Saldo.setText("Saldo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bAdiciona))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Saldo)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField1))
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(336, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSpinner1)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Saldo)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bRemove)
                            .addComponent(bAdiciona))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(tTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // --- EVENTOS (ações quando o usuário clica ou seleciona algo) ---

    /**
     * Evento: quando o usuário clica no botão "Adiciona"
     */
    private void bAdicionaActionPerformed(java.awt.event.ActionEvent evt) {
        // Pega o produto selecionado na lista suspensa
        Produto produtoSelecionado = (Produto) jComboBox1.getSelectedItem();
        
        // Pega a quantidade escolhida no spinner (1 a 10)
        int quantidade = (Integer) jSpinner1.getValue();

        // VERIFICA SE HÁ ESTOQUE SUFICIENTE
        if (produtoSelecionado.getSaldoEstoque() < quantidade) {
            // Mostra mensagem de erro se não tiver estoque
            javax.swing.JOptionPane.showMessageDialog(this,
                "Estoque insuficiente! Disponível: " + produtoSelecionado.getSaldoEstoque(),
                "Erro",
                javax.swing.JOptionPane.ERROR_MESSAGE);
            return; // Sai do método sem fazer mais nada
        }

        // Calcula o valor total desse item (preço × quantidade)
        double total = produtoSelecionado.getPreco() * quantidade;

        // Cria um novo item de venda (produto + quantidade + total)
        ProdutoVenda produtoVenda = new ProdutoVenda();
        produtoVenda.setProduto(produtoSelecionado);
        produtoVenda.setQuantidade(quantidade);
        produtoVenda.setTotal(total);

        // Adiciona esse item ao carrinho (na lista visual)
        listaCarrinho.addElement(produtoVenda);

        // ATUALIZA O ESTOQUE: tira a quantidade vendida
        produtoSelecionado.setSaldoEstoque(
            produtoSelecionado.getSaldoEstoque() - quantidade
        );

        // Atualiza o valor total da compra (soma tudo no carrinho)
        atualizarTotal();

        // Mostra o item adicionado no campo de texto (histórico)
        jTextArea1.append(produtoVenda.toString() + "\n");

        // Atualiza o campo "Saldo" com o novo estoque do produto selecionado
        jTextField1.setText(String.valueOf(produtoSelecionado.getSaldoEstoque()));
    }

    /**
     * Evento: quando o usuário muda a seleção no combo box (lista de produtos)
     */
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {
        // Hoje não faz nada, mas poderia atualizar o saldo automaticamente aqui
        // Exemplo (opcional):
        // Produto p = (Produto) jComboBox1.getSelectedItem();
        // if (p != null) jTextField1.setText(String.valueOf(p.getSaldoEstoque()));
    }

    /**
     * Evento: quando o usuário clica em "Remove"
     */
    private void bRemoveActionPerformed(java.awt.event.ActionEvent evt) {
        // Verifica se algum item está selecionado no carrinho
        int selectedIndex = jList1.getSelectedIndex();
        if (selectedIndex >= 0) {
            // Pega o item selecionado
            ProdutoVenda itemRemovido = listaCarrinho.get(selectedIndex);
            Produto produto = itemRemovido.getProduto();
            
            // DEVOLVE O ESTOQUE: adiciona de volta a quantidade removida
            produto.setSaldoEstoque(
                produto.getSaldoEstoque() + itemRemovido.getQuantidade()
            );
            
            // Remove o item do carrinho
            listaCarrinho.removeElementAt(selectedIndex);
            
            // Atualiza o total da compra
            atualizarTotal();
            
            // Atualiza o campo de saldo com o novo valor do produto
            jTextField1.setText(String.valueOf(produto.getSaldoEstoque()));
        }
    }

    /**
     * Método principal: inicia a aplicação
     */
    public static void main(String args[]) {
        // Define o visual "Nimbus" (mais bonito que o padrão)
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            
        } catch (Exception ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }

        // Cria e mostra a janela
        java.awt.EventQueue.invokeLater(() -> new Principal().setVisible(true));
    }
    
    /**
     * Calcula e exibe o total da compra (soma de todos os itens no carrinho)
     */
    private void atualizarTotal() {
        double total = 0;
        for (int i = 0; i < listaCarrinho.size(); i++) {
            total += listaCarrinho.get(i).getTotal();
        }
        // Formata como moeda: ex: "R$ 10.50"
        tTotal.setText(String.format("R$ %.2f", total));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Saldo;
    private javax.swing.JButton bAdiciona;
    private javax.swing.JButton bRemove;
    private javax.swing.JComboBox<Produto> jComboBox1;
    private javax.swing.JList<ProdutoVenda> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField tTotal;
    // End of variables declaration//GEN-END:variables
}